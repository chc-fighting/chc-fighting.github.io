<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>随风飘飘</title><link href="http://chc-fighting.github.io/" rel="alternate"></link><link href="http://chc-fighting.github.io/feeds%5Cbian-cheng.atom.xml" rel="self"></link><id>http://chc-fighting.github.io/</id><updated>2014-09-27T00:00:00+08:00</updated><entry><title>PAT-数据结构学习与实验指导</title><link href="http://chc-fighting.github.io/liushuixiaozhu-3.html" rel="alternate"></link><updated>2014-09-27T00:00:00+08:00</updated><author><name>亦文梦之</name></author><id>tag:chc-fighting.github.io,2014-09-27:liushuixiaozhu-3.html</id><summary type="html">&lt;p&gt;PAT(Programming Ability Test)网址 &lt;a href="http://pat.zju.edu.cn/contests/ds/"&gt;http://pat.zju.edu.cn/contests/ds&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或者参见我CSDN上的博客文章 &lt;a href = "http://blog.csdn.net/wutongyu0113/article/"&gt;http://blog.csdn.net/wutongyu0113/article/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于这一部分的题目网上有很多人都给出过解答方法和源码，但大都是以C++完成的，因为C++简单方便。自己当时一心想着先提高C的编程能力再去学习C++，所以一直坚持用C来解决数据结构的问题，虽然没有C++模板类那么方便，很多时候需要自己去定义一些结构体和函数，但这有利于对数据结构内部机理的掌握。&lt;/p&gt;
&lt;p&gt;下面给出部分题目的答案，还有部分题目自己没有AC，所以暂不放上来了。&lt;/p&gt;
&lt;h2 id="2-06"&gt;2-06 数列求和&lt;/h2&gt;
&lt;p&gt;题目描述：&lt;/p&gt;
&lt;p&gt;给定某数字A（1&amp;lt;=A&amp;lt;=9）以及非负整数N（0&amp;lt;=N&amp;lt;=100000），求数列之和S = A + AA + AAA + … + AA…A(N个A)。例如A=1, N=3时，S = 1 + 11 + 111 = 123。&lt;/p&gt;
&lt;p&gt;输入格式说明：&lt;/p&gt;
&lt;p&gt;输入数字A与非负整数N。&lt;/p&gt;
&lt;p&gt;输出格式说明：&lt;/p&gt;
&lt;p&gt;输出其N项数列之和S的值。&lt;/p&gt;
&lt;p&gt;解答说明：&lt;/p&gt;
&lt;p&gt;由于和S特别大，所以不可能直接求和计算，否则肯定会运行超时或者内存超限。
可以把求和写成算式的形式
如A+AA+AAA写成
    AAA
      AA
        A
这样和的个位肯定是A&lt;em&gt;3%10，十位肯定是(A&lt;/em&gt;2+A*3/10)%10，以此类推。
可以用堆栈保存每一位的结果，最后再输出即可。&lt;/p&gt;
&lt;h3 id="_1"&gt;源码：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
#include"stdio.h"
#include"stdlib.h"

typedef struct Node *ptrNode;
typedef ptrNode stack;
typedef int ElementType;

struct Node{
   ElementType Element;
   ptrNode next;
};


/*检验是否空栈*/
int IsEmpty(stack S)
{
  return S-&gt;next == NULL;
}
/*销毁一个站，置空*/
void MakeEmpty(stack S)
{
   if(S == NULL){
        printf("stack is already empty");
        exit(0);
    }
    else
        while(!IsEmpty(S))
            popAndReturnTop(S);
}

stack Createstack(void)
{
    stack S;

    if((S = malloc(sizeof(struct Node))) == NULL){//不要少了括号！！！
        printf("Unable to allocate memory");
        exit(0);
    }
    S-&gt;next = NULL;
    MakeEmpty(S);
    return S;
}

void push(ElementType x, stack S)
{
    ptrNode TmpCell;
    TmpCell = malloc(sizeof(struct Node));
    TmpCell-&gt;Element = x;
    TmpCell-&gt;next = S-&gt;next;
    S-&gt;next = TmpCell;
}

ElementType popAndReturnTop(stack S)
{
    ptrNode TmpCell;
    ElementType TopElement;
    if(S == NULL){
        printf("Empty stack");
        exit(0);
    }
    else{
        TmpCell = S-&gt;next;
        S-&gt;next = S-&gt;next-&gt;next;
        TopElement = TmpCell-&gt;Element;
        free(TmpCell);
    }
    return TopElement;
}


int main(void)
{
    int A, N;
    int i,m,n,carry,temp;
    stack s;

    s = Createstack();

    scanf("%d%d",&amp;A,&amp;N);
    if(N == 0)
        printf("0");
    carry = 0;
    for(i = N; i&gt;0;i--){
        n = i * A + carry;
        m = n % 10;
        carry = n / 10;
        if(i != 1)
            push(m,s);
        else
            push(n,s);
    }
    while(!IsEmpty(s)){
        temp = popAndReturnTop(s);
        printf("%d",temp);
    }
    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="2-07"&gt;2-07 素因子分解&lt;/h2&gt;
&lt;p&gt;题目说明：&lt;/p&gt;
&lt;p&gt;给定某个正整数N，求其素因子分解结果，即给出其因式分解表达式 N = p1^k1 * p2^k2 &lt;em&gt;…&lt;/em&gt;pm ^km。&lt;/p&gt;
&lt;p&gt;输入格式说明：&lt;/p&gt;
&lt;p&gt;输入long int范围内的正整数N。&lt;/p&gt;
&lt;p&gt;输出格式说明：&lt;/p&gt;
&lt;p&gt;按给定格式输出N的素因式分解表达式，即 N = p1^k1 * p2^k2 &lt;em&gt;…&lt;/em&gt;pm ^km，其中pi为素因子并要求由小到大输出，指数ki为pi的个数；当ki==1即因子pi只有一个时不输出ki。&lt;/p&gt;
&lt;p&gt;解答说明：
从小到大依次寻找素因子，并对每一个素因子的个数做统计。&lt;/p&gt;
&lt;h3 id="_2"&gt;源码：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
#include"stdio.h"
#include"math.h"

int main(void)
{
    int i,j;
    long int m, n;
    int count;
    int isPrime,flag;

    isPrime = 1;
    flag = 0;

    scanf("%ld",&amp;n);
    printf("%ld=",n);
    m = sqrt(n);
    for(i = 2; i &lt;= m;i++){
        if(n%i == 0){
            //printf("%d",i);
            isPrime = 0;
            count = 1;
            n = n / i;
            while(n%i == 0){
                n = n / i;
                count++;
            }
            if(flag)
                printf("*");
            else
                flag = 1;
            if(count == 1)
                printf("%d",i);
            else
                printf("%d^%d",i,count);
        }
    }
    if(isPrime)
        printf("%d",n);

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="2-08-24"&gt;2-08  用扑克牌计算24点&lt;/h2&gt;
&lt;p&gt;题目描述：&lt;/p&gt;
&lt;p&gt;一副扑克牌的每张牌表示一个数（J、Q、K分别表示11、12、13，两个司令都表示6）。任取4张牌，即得到4个1~13的数，请添加运算符（规定为加+ 减- 乘* 除/ 四种）使之成为一个运算式。每个数只能参与一次运算，4个数顺序可以任意组合，4个运算符任意取3个且可以重复取。运算遵从一定优先级别，可加括号控制，最终使运算结果为24。请输出一种解决方案的表达式，用括号表示运算优先。如果没有一种解决方案，则输出-1表示无解。&lt;/p&gt;
&lt;p&gt;输入格式说明：&lt;/p&gt;
&lt;p&gt;输入在一行中给出4个整数，每个整数取值在[1, 13]。&lt;/p&gt;
&lt;p&gt;输出格式说明：&lt;/p&gt;
&lt;p&gt;输出一种解决方案的表达式，用括号表示运算优先。如果没有解决方案，请输出-1。&lt;/p&gt;
&lt;p&gt;解答说明：&lt;/p&gt;
&lt;p&gt;四个操作数，三个操作符，两个括号，有以下五种计算模式&lt;/p&gt;
&lt;p&gt;((A op B) op C) op D&lt;/p&gt;
&lt;p&gt;(A op (B op C)) op D&lt;/p&gt;
&lt;p&gt;A op (B op (C op D))&lt;/p&gt;
&lt;p&gt;A op ((B op C) op D)&lt;/p&gt;
&lt;p&gt;(A op B) op (C op D)&lt;/p&gt;
&lt;p&gt;将每一种模式写成函数，最后采用穷举法找到计算结果为24的算式。&lt;/p&gt;
&lt;h3 id="_3"&gt;源码：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
//注意要在输出结果后面加\n，不然会有格式错误，坑爹啊!!!
#include"stdio.h"
#include"stdlib.h"

char op[5]={'#','+','-','*','/',};

float cal(float x,float y,int op)
{
  switch(op)
  {
    case 1:return x+y;
    case 2:return x-y;
    case 3: return x*y;
    case 4: return x/y;
  }
}

float calculate_model1(float i,float j,float k,float t,int op1,int op2,int op3)
{
  float r1,r2,r3;
  r1 = cal(i,j,op1);
  r2 = cal(r1,k,op2);
  r3 = cal(r2,t,op3);
  return r3;
}

float calculate_model2(float i,float j,float k,float t,int op1,int op2,int op3)
{
  float r1,r2,r3;
  r1 = cal(j,k,op2);
  r2 = cal(i,r1,op1);
  r3 = cal(r2,t,op3);
  return r3;
}

float calculate_model3(float i,float j,float k,float t,int op1,int op2,int op3)
{
  float r1,r2,r3 ;
  r1 = cal(k,t,op3);
  r2 = cal(j,r1,op2);
  r3 = cal(i,r2,op1);
  return r3;
}


float calculate_model4(float i,float j,float k,float t,int op1,int op2,int op3)
{
  float r1,r2,r3;
  r1 = cal(j,k,op2);
  r2 = cal(r1,t,op3);
  r3 = cal(i,r2,op1);
  return r3;
}

float calculate_model5(float i,float j,float k,float t,int op1,int op2,int op3)
{
  float r1,r2,r3 ;
  r1 = cal(i,j,op1);
  r2 = cal(k,t,op3);
  r3 = cal(r1,r2,op2);
  return r3;
}

int get24(int i,int j,int k,int t)
{
    int op1,op2,op3;
    int flag=0;
    for(op1=1;op1&lt;=4;op1++)
        for(op2=1;op2&lt;=4;op2++)
            for(op3=1;op3&lt;=4;op3++)
            {
               if(calculate_model1(i,j,k,t,op1,op2,op3)==24){
                   printf("((%d%c%d)%c%d)%c%d\n",i,op[op1],j,op[op2],k,op[op3],t);flag = 1;goto OUT;
               }
               if(calculate_model2(i,j,k,t,op1,op2,op3)==24){
                   printf("(%d%c(%d%c%d))%c%d\n",i,op[op1],j,op[op2],k,op[op3],t);flag = 1;goto OUT;
               }
               if(calculate_model3(i,j,k,t,op1,op2,op3)==24){
                   printf("%d%c(%d%c(%d%c%d))\n",i,op[op1],j,op[op2],k,op[op3],t);flag = 1;goto OUT;
               }
               if(calculate_model4(i,j,k,t,op1,op2,op3)==24){
                   printf("%d%c((%d%c%d)%c%d)\n",i,op[op1],j,op[op2],k,op[op3],t);flag = 1;goto OUT;
               }
               if(calculate_model5(i,j,k,t,op1,op2,op3)==24){
                   printf("(%d%c%d)%c(%d%c%d)\n",i,op[op1],j,op[op2],k,op[op3],t);flag = 1;goto OUT;
               }
            }

OUT:    return flag;
}

int main()
{
    int x,y,m,n;
    int i,j,k,t;
    int in[4];
    int flag;
    for(i=0;i&lt;4;i++)
        scanf("%d",&amp;in[i]);
    for(i=0;i&lt;4;i++){
        for(j=0;j&lt;4;j++){
            if(j==i) continue;
            for(k=0;k&lt;4;k++){
                if(i==k||j==k) continue;
                for(t=0;t&lt;4;t++){
                    if(t==i||t==j||t==k) continue;
                    x = in[i];
                    y = in[j];
                    m = in[k];
                    n = in[t];
                    flag = get24(x,y,m,n);
                    if(flag ==1) goto END;
                }
            }
        }
    }
    if(flag == 0)
     printf("-1\n");

 END:   return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="2-09"&gt;2-09 装箱问题模拟&lt;/h2&gt;
&lt;p&gt;题目描述：
假设有N项物品，大小分别为s1, s2, …, si, …, sN，其中si为满足1&amp;lt;= si&amp;lt;=100的整数。要把这些物品装入到容量为100的一批箱子（序号1～N）中。装箱方法是：对每项物品, 顺序扫描箱子，把该物品放入足以能够容下它的第一个箱子中。请写一个程序模拟这种装箱过程，并输出每个物品所在的箱子序号，以及放置全部物品所需的箱子数目。&lt;/p&gt;
&lt;p&gt;输入格式说明：&lt;/p&gt;
&lt;p&gt;输入第1行给出物品个数N(&amp;lt;=1000)，第2行给出N个正整数si（1 &amp;lt;= si &amp;lt;= 100，表示第i项物品的大小）。&lt;/p&gt;
&lt;p&gt;输出格式说明：&lt;/p&gt;
&lt;p&gt;按照输入顺序输出每个物品的大小及其所在的箱子序号，每个物品占1行，最后一行输出所需的箱子数目。&lt;/p&gt;
&lt;p&gt;解答说明：
针对每一项物品，顺序扫描箱子，如果箱子能放得下，记录该物品所在的箱子，并将该箱子的容量更新。&lt;/p&gt;
&lt;h3 id="_4"&gt;源码：&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
#include"stdio.h"

int main(void)
{
    int n;
    int *p,*q;
    int i,j,maxCount;


    scanf("%d",&amp;n);
    p = (int*)malloc(n*sizeof(int));
    q = (int*)malloc(n*sizeof(int));
    for(i=0;i&lt;n;i++)
        scanf("%d",&amp;(*(p+i)));
    for(i=0;i&lt;n;i++)
        *(q+i) = 100;
    maxCount = 1;
    for(i=0;i&lt;n;i++){
        j = 1;
        while(1){
            if(*(q+j-1) &gt;= *(p+i)){
                *(q+j-1) -= *(p+i);
                if(j &gt; maxCount)
                    maxCount = j;
                printf("%d %d\n",*(p+i),j);
                break;
            }
            else{
                j++;
            }
        }
    }
    printf("%d\n",maxCount);

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="2-10"&gt;2-10 海盗分赃&lt;/h2&gt;
&lt;p&gt;题目描述：
P个海盗偷了D颗钻石后来到公海分赃，一致同意如下分赃策略：&lt;/p&gt;
&lt;p&gt;首先，P个海盗通过抽签决定1-P的序号。然后由第1号海盗提出一个分配方案（方案应给出每个海盗分得的具体数量），如果能够得到包括1号在内的绝对多数（即大于半数）同意，则按照该分配方案执行，否则1号将被投入大海喂鲨鱼；而后依次类似地由第2号、第3号等等海盗提出方案，直到能够获得绝对多数同意的方案出现为止，或者只剩下最后一位海盗，其独占所有钻石。请编写一个程序，给出第1号海盗的钻石分配方案中自己分得的钻石数量。&lt;/p&gt;
&lt;p&gt;附带的三个假定：&lt;/p&gt;
&lt;p&gt;1) “聪明”与“贪婪”假定：每个海盗总能够以本人利益最大化作为行为准则；
2) “人性化”假定：在能够取得尽量多钻石的情况下，海盗不会故意致同伙于死地；
3) “无偏见”假定：海盗之间没有个人恩怨，分给其他海盗钻石的次序以小序号优先为原则。&lt;/p&gt;
&lt;p&gt;输入格式说明：&lt;/p&gt;
&lt;p&gt;输入2个正整数D和P（3&amp;lt;=P&amp;lt;=D&amp;lt;=100）。&lt;/p&gt;
&lt;p&gt;输出格式说明：&lt;/p&gt;
&lt;p&gt;输出第1号海盗的钻石分配方案中自己分得的钻石数量。&lt;/p&gt;
&lt;p&gt;样例输入与输出：&lt;/p&gt;
&lt;p&gt;输入  输出  &lt;/p&gt;
&lt;p&gt;10 7 6&lt;/p&gt;
&lt;p&gt;3 3 2&lt;/p&gt;
&lt;p&gt;100 3 99&lt;/p&gt;
&lt;p&gt;100 100 49&lt;/p&gt;
&lt;p&gt;题目解答：&lt;/p&gt;
&lt;p&gt;这个题目其实意义不大，主要是理解题意。
当3个人时，如果第1个人被投死，那么第2个人只能讲钻石全部给最后一个人，否则自己一定会被投死，所以第一个人为了拉拢第二个人，只需给第二个人一颗钻石就好。
当4个人时，由于第二个人总有选择使自己的钻石数最多，所以他一定会投反对，因此第一个人需要拉拢第三和第四个人，他们两个在第一个人死了的情况下能得到1颗和0颗钻石，那么第一个人需要分别给他们2颗和1颗钻石才能拉拢他们投赞成票。
之后都是这样，靠前的人一定倾向于投反对票，所以要从后面的人中拉拢，要拉拢他们必须要在原来的基础上多给他们一颗钻石。
于是便能得到程序所表示的规律。&lt;/p&gt;
&lt;h3 id="_5"&gt;源码：&lt;/h3&gt;
&lt;p&gt;&lt;pre&gt;&lt;code&gt;&lt;/p&gt;
&lt;h1 id="include-stdioh"&gt;include &amp;lt; stdio.h&amp;gt;&lt;/h1&gt;
&lt;h1 id="include-stdlibh"&gt;include &amp;lt; stdlib.h&amp;gt;&lt;/h1&gt;
&lt;p&gt;int main()
{
    int d,p;
    scanf("%d%d",&amp;amp;d,&amp;amp;p);
    if(p == 3){
        printf("%d",d-1);
    }
    else{
        printf("%d",d-(p/2+1));
    }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</summary><category term="PAT 编程 数据结构 C语言"></category></entry></feed>